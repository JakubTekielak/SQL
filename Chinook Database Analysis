In this project I completed an analysis a database named Chinook that contained numerous tables such as 
# Albums, Artists, Customers, Employees, Genres, Invoice_items, Invoices, Media_types, Playlist_track, Playlists, Tracks.
# The following tables were related and contained data such as: 
 employees table stores employees data such as employee id, last name, first name, etc. It also has a field named ReportsTo to specify who reports to whom.
 customers table stores customers data. A code line such as employees.Employeeid and customers.SupportRepID shows how the two tables are related.
 The invoices table stores invoice header data (Customer ID, Billing Address, etc) and the invoice_items table stores the invoice line items data (Unit Price, Quantity).
 artists table stores artists data.
 albums table stores data about a list of tracks. Each album belongs to one artist. However, one artist may have multiple albums.
 media_types table stores media types such as MPEG audio and AAC audio files.
 genres table stores music types such as rock, jazz, metal, etc.
 tracks table stores the data of songs. Each track belongs to one album.
 playlists table store data about playlists. Each playlist contains a list of tracks. Each track may belong to multiple playlists. The relationship between the playlists table and tracks table is many-to-many. 
 The playlist_track table is used to reflect this relationship.

I then answered a mix of questions I had asked myself, and that had been given to me along with the database

--#1 Show Customers (their full names, customer ID, and country) who are not in the US
select firstname, lastname, customerId, country
from customers
where country <> 'USA';
--#2 Show only the Customers from Brazil.
select firstname, lastname, customerID
from customers
where country='Brazil';
--#3 Find the Invoices of customers who are from Brazil. The resulting table should show the customer's full name, Invoice ID, Date of the invoice, and billing country.
select firstname, lastname, invoiceId, InvoiceDate, BillingCountry
from invoices
left join customers ON
invoices.customerId=customers.CustomerId
Where Billingcountry='Brazil';

--#4 Show the Employees who are Sales Agents.
select * 
from employees
where title='Sales Support Agent';

--#5 Find a unique/distinct list of billing countries from the Invoice table
select DISTINCT billingcountry
from invoices;

--#6 Provide a query that shows the invoices associated with each sales agent. The resulting table should include the Sales Agent's full name
Select emp.lastname, emp.firstname, invoiceId
from employees as emp
JOIN customers
ON emp.EmployeeId=customers.SupportRepId

JOIN invoices 
ON customers.CustomerId=invoices.CustomerId
order by emp.lastname, emp.firstname;

--#7 Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers.
Select cust.lastname, cust.firstname, Country, Total, emp.lastname, emp.firstname
From employees as emp
JOIN customers as cust
ON cust.supportRepID=emp.EmployeeId

JOIN invoices
ON invoices.CustomerID=cust.customerID;

--#8 How many Invoices were there in 2009?
select COUNT(invoiceID)
from invoices
where InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31';

-- #9 What are the total sales for 2009?
select SUM(total)
from invoices
Where invoiceDate between '2009-01-01' AND '2009-12-31';

-- #10 Write a query that includes the purchased track name with each invoice line ID.
select Name, InvoiceLineId
from tracks
Inner Join invoice_items
ON tracks.TrackId=invoice_items.TrackId
order by InvoiceLineID;
--#11 Write a query that includes the purchased track name AND artist name with each invoice line ID.
select tracks.Name as track_name, artists.Name as artist_name, InvoiceLineID
from tracks
Inner Join invoice_items
ON tracks.TrackId=invoice_items.TrackId

Join albums 
ON tracks.AlbumId=albums.AlbumId

Left Join artists
ON albums.artistId=artists.ArtistId;

--#12 Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre.

select tracks.Name as 'Track name', albums.title as 'Album Title', media_types.Name as 'media type'
,genres.Name as Genre
from tracks
JOIN albums ON tracks.AlbumId=albums.AlbumId
JOIN media_types ON tracks.MediaTypeId=media_types.MediaTypeId
JOIN genres ON tracks.GenreId=genres.GenreId;

--#13 Show the total sales made by each sales agent.
select employees.LastName, employees.FirstName, ROUND(SUM(TOTAL), 2) as 'Total Sales'
from employees
JOIN customers
ON employees.EmployeeId=customers.SupportRepId

JOIN invoices 
ON customers.CustomerId=invoices.CustomerId
WHERE Title = 'Sales Support Agent' 
Group by employeeId, employees.LastName, employees.FirstName
Order by employees.LastName, employees.FirstName;

--#14 Which sales agent made the most dollars in sales in 2009?

select employees.LastName, employees.FirstName, ROUND(SUM(Total),1) as 'sales revenue'
from employees
JOIN customers
ON employees.EmployeeId=customers.SupportRepId

JOIN invoices 
ON customers.CustomerId=invoices.CustomerId
WHERE Title = 'Sales Support Agent' 
AND InvoiceDate like '2009%'
Group by employeeId, employees.LastName, employees.FirstName
Order by employees.LastName, employees.FirstName LIMIT 1;

--#15. How many  playlists contain the track "Balls to the Wall"

select tracks.Name, COUNT(playlistID)
from tracks
JOIN playlist_track ON tracks.TrackID=playlist_track.TrackID
Where tracks.Name='Balls to the Wall'
Order by tracks.Name;

--#16 Create a query that shows the album with the highest total sales revenue

Select albums.Title, ROUND(SUM(invoices.TOTAL),2) as 'sales revenue'
From albums
JOIN tracks ON albums.AlbumId=tracks.AlbumId
JOIN invoice_items ON tracks.TrackId=invoice_items.TrackId
JOIn invoices ON invoice_items.InvoiceId=invoices.InvoiceId
group by albums.Title
order by SUM(Total) desc Limit 1;

--#17 Write a query to retrieve the names of customers along with the titles of the albums they have purchased, and the name of the employee who handled the transaction
SELECT customers.LastName AS CustomerLastName, 
customers.FirstName AS CustomerFirstName, 
albums.Title AS AlbumTitle, 
employees.LastName AS EmployeeLastName,
employees.FirstName AS EmployeeFirstName
FROM customers
JOIN employees ON customers.SupportRepId = employees.EmployeeId
JOIN invoices ON customers.CustomerId = invoices.CustomerId
JOIN invoice_items ON invoices.InvoiceId = invoice_items.InvoiceId
JOIN tracks ON invoice_items.TrackId = tracks.TrackId
JOIN albums ON tracks.AlbumId = albums.AlbumId;
